{"version":3,"sources":["components/Punch.js","components/Day.js","App.js","serviceWorker.js","index.js"],"names":["Punch","_this","this","react_default","a","createElement","TextField","type","value","props","time","onChange","e","updatePunch","dayIndex","punchIndex","target","React","Component","Day","className","name","hours","minutes","punches","map","punch","i","components_Punch","key","day","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setTotals","days","state","totalMinutes","forEach","normalMinutes","overtimeMinutes","dayMinutes","regularHours","Math","floor","regularMinutes","overtimeHours","setState","totalDay","convertToMills","Date","parse","totalTime","length","punchInMils","totalHours","index","arguments","undefined","_this2","components_Day","bind","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed123cac.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass Punch extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <TextField \r\n                    type=\"time\"\r\n                    value = {this.props.time}\r\n                    onChange={(e) => {this.props.updatePunch(this.props.dayIndex, this.props.punchIndex, e.target.value)}}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Punch","import React from 'react';\r\nimport Punch from './Punch.js';\r\n\r\n\r\n\r\nfunction Day(props) {\r\n    \r\n    return(\r\n        <div className=\"dayContainer\">\r\n            <h3>{props.name}:</h3>\r\n            <h3>{props.hours}H {props.minutes}M</h3>\r\n            <div className=\"punchContainer\">\r\n                {props.punches.map((punch, i) =>\r\n                    <Punch key={i} day={props.name} time={punch} dayIndex={props.dayIndex} punchIndex={i} updatePunch={props.updatePunch}/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Day","import React from 'react';\r\nimport Day from './components/Day.js';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      days: [\r\n        {\r\n          name: 'Sunday',\r\n          punches: ['00:00','00:00','00:00','00:00','00:00','00:00','00:00','00:00'],\r\n          hours: 0,\r\n          minutes: 0,\r\n          regularHours: 0,\r\n          regularMinutes: 0,\r\n          overtimeHours: 0,\r\n          overtimeMinutes: 0,\r\n        },\r\n        {\r\n          name: 'Monday',\r\n          punches: ['00:00','00:00','00:00','00:00','00:00','00:00','00:00','00:00'],\r\n          hours: 0,\r\n          minutes: 0,\r\n          regularHours: 0,\r\n          regularMinutes: 0,\r\n          overtimeHours: 0,\r\n          overtimeMinutes: 0,\r\n        },\r\n        {\r\n          name: 'Tuesday',\r\n          punches: ['00:00','00:00','00:00','00:00','00:00','00:00','00:00','00:00'],\r\n          hours: 0,\r\n          minutes: 0,\r\n          regularHours: 0,\r\n          regularMinutes: 0,\r\n          overtimeHours: 0,\r\n          overtimeMinutes: 0,\r\n        },\r\n        {\r\n          name: 'Wednesday',\r\n          punches: ['00:00','00:00','00:00','00:00','00:00','00:00','00:00','00:00'],\r\n          hours: 0,\r\n          minutes: 0,\r\n          regularHours: 0,\r\n          regularMinutes: 0,\r\n          overtimeHours: 0,\r\n          overtimeMinutes: 0,\r\n        },\r\n        {\r\n          name: 'Thursday',\r\n          punches: ['00:00','00:00','00:00','00:00','00:00','00:00','00:00','00:00'],\r\n          hours: 0,\r\n          minutes: 0,\r\n          regularHours: 0,\r\n          regularMinutes: 0,\r\n          overtimeHours: 0,\r\n          overtimeMinutes: 0,\r\n        },\r\n        {\r\n          name: 'Friday',\r\n          punches: ['00:00','00:00','00:00','00:00','00:00','00:00','00:00','00:00'],\r\n          hours: 0,\r\n          minutes: 0,\r\n          regularHours: 0,\r\n          regularMinutes: 0,\r\n          overtimeHours: 0,\r\n          overtimeMinutes: 0,\r\n        },\r\n        {\r\n          name: 'Saturday',\r\n          punches: ['00:00','00:00','00:00','00:00','00:00','00:00','00:00','00:00'],\r\n          hours: 0,\r\n          minutes: 0,\r\n          regularHours: 0,\r\n          regularMinutes: 0,\r\n          overtimeHours: 0,\r\n          overtimeMinutes: 0,\r\n        },\r\n        \r\n      ]\r\n    }\r\n  }\r\n\r\n  setTotals = (dayIndex, hours, minutes) => {\r\n    let days = this.state.days\r\n    days[dayIndex].hours = hours\r\n    days[dayIndex].minutes = minutes\r\n\r\n    let totalMinutes = 0\r\n    const overtimeLimit = 40 * 60\r\n    days.forEach(function(day, i) {\r\n      let normalMinutes = 0\r\n      let overtimeMinutes = 0\r\n      let dayMinutes = ((day.hours * 60) + day.minutes)\r\n      totalMinutes += dayMinutes\r\n      if (totalMinutes > overtimeLimit) {\r\n        if (totalMinutes - dayMinutes > overtimeLimit){\r\n          overtimeMinutes = dayMinutes;\r\n        } else {\r\n          overtimeMinutes = (totalMinutes - overtimeLimit);\r\n          normalMinutes = dayMinutes - overtimeMinutes;\r\n        }\r\n      } else {\r\n        normalMinutes = dayMinutes\r\n      }\r\n      days[i].regularHours = Math.floor(normalMinutes/60);\r\n      days[i].regularMinutes = (normalMinutes % 60);\r\n      days[i].overtimeHours = Math.floor(overtimeMinutes/60);\r\n      days[i].overtimeMinutes = (overtimeMinutes % 60);\r\n\r\n    })\r\n\r\n    this.setState({days: days})\r\n  }\r\n\r\n  totalDay = (punches, dayIndex) => {\r\n    function convertToMills(time) {\r\n        return Date.parse('01 Jan 2000 ' + time + ' GMT')\r\n    }\r\n    let totalTime = 0;\r\n    let i = 0;\r\n    while (i < punches.length) {\r\n        if (i % 2 === 0) {\r\n            let punchIn = punches[i];\r\n            let punchInMils = convertToMills(punchIn);\r\n            let punchOut = punches[i+1];\r\n            let punchOutMils = convertToMills(punchOut);\r\n            totalTime += ((punchOutMils - punchInMils) / 60000)\r\n        }\r\n        i+= 2;\r\n    }\r\n    var totalHours = Math.floor(totalTime / 60);\r\n    var totalMinutes = totalTime % 60;\r\n    this.setTotals(dayIndex, totalHours, totalMinutes)\r\n    //return <span>Hours: {totalHours} Minutes: {totalMinutes}</span>\r\n\r\n}\r\n\r\n\r\n  updatePunch = (dayIndex, index = 0, time = '00:00') => {\r\n    \r\n    let days = this.state.days;\r\n    if (typeof(days[dayIndex] !== 'undefined')) {\r\n      days[dayIndex].punches[index] = time\r\n      \r\n      this.totalDay(days[dayIndex].punches, dayIndex)\r\n\r\n      /* TODO: reimplement dynamic field generation\r\n       if (punchCount <= currentPunch) {\r\n      const punchCount = days[dayIndex].punches.length\r\n      const currentPunch = index + 1;\r\n        days[dayIndex].punches.push('23:58');\r\n      } */\r\n\r\n      this.setState({\r\n        days: days\r\n      })\r\n      \r\n\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const days = this.state.days.map((day, index) => \r\n      <div className=\"day\" key={day.name} >\r\n        <Day \r\n          name={day.name} \r\n          dayIndex={index} \r\n          punches={day.punches} \r\n          updatePunch={this.updatePunch.bind(this)}\r\n          setTotals={this.setTotals.bind(this)}\r\n          hours={day.hours}\r\n          minutes={day.minutes}\r\n          regularHours={day.regularHours}\r\n          regularMinutes={day.regularMinutes}\r\n          overtimeHours={day.overtimeHours}\r\n          overtimeMinutes={day.overtimeMinutes}\r\n        />\r\n      </div>\r\n    )\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img className=\"cat\" alt=\"Cat.\" src=\"https://cataas.com/cat\" />\r\n          <div className=\"headerText\">\r\n            <h1>Shay's Fancy Timesheet Calculator</h1>\r\n            <span>⏲</span>\r\n          </div>\r\n          <img className=\"cat\" alt=\"Cat.\" src=\"https://cataas.com/cat?type=or\" />\r\n        </header>\r\n        <div className=\"calculator\">\r\n          {days}\r\n          \r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}